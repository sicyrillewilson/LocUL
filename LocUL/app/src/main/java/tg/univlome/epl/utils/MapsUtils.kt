@file:Suppress("DEPRECATION")

package tg.univlome.epl.utils

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.res.Resources
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.drawable.BitmapDrawable
import android.util.Log
import android.view.MotionEvent
import android.widget.Toast
import androidx.annotation.RequiresPermission
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import okhttp3.Call
import okhttp3.Callback
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import org.json.JSONException
import org.json.JSONObject
import org.osmdroid.tileprovider.tilesource.TileSourceFactory
import org.osmdroid.util.BoundingBox
import org.osmdroid.util.GeoPoint
import org.osmdroid.views.MapView
import org.osmdroid.views.overlay.Marker
import org.osmdroid.views.overlay.Overlay
import org.osmdroid.views.overlay.Polyline
import tg.univlome.epl.R
import java.io.IOException

/**
 * Objet MapsUtils : Fournit des utilitaires li√©s √† la carte et √† la g√©olocalisation,
 * utilis√©s pour la manipulation de donn√©es sur les cartes OpenStreetMap avec OSMDroid.
 *
 * Description :
 * Cet objet contient un ensemble de fonctions utilitaires pour g√©rer les cartes,
 * la g√©olocalisation, les marqueurs, et l‚Äôitin√©raire entre deux points. Elle permet
 * √©galement la sauvegarde et la r√©cup√©ration des donn√©es de g√©olocalisation via
 * les pr√©f√©rences partag√©es de l‚Äôapplication Android.
 * Elle est utilis√©e dans le contexte d'une application de visualisation et navigation
 * vers des b√¢timents √† l'aide d'une carte embarqu√©e.
 *
 * Composants principaux :
 *  - Calcul de distance entre deux points g√©ographiques
 *  - Sauvegarde/chargement des positions utilisateur et destination
 *  - Gestion et affichage des marqueurs
 *  - Affichage de l‚Äôitin√©raire sur carte (OpenRouteService)
 *  - Configuration d'une carte miniature (miniMap)
 *
 * Biblioth√®ques utilis√©es :
 * - OSMDroid pour l‚Äôaffichage et la manipulation de la carte
 * - OpenRouteService pour le calcul d‚Äôitin√©raires
 *
 * @see MapsActivity pour l'utilisation principale de cette classe
 */
object MapsUtils {

    private val client = OkHttpClient()
    private val iconCache = mutableMapOf<Int, BitmapDrawable>()

    /**
     * Calcule la distance en m√®tres entre deux points g√©ographiques.
     *
     * @param start Le point de d√©part.
     * @param end Le point d‚Äôarriv√©e.
     * @return Distance en m√®tres.
     */
    fun calculateDistance(start: GeoPoint, end: GeoPoint): Double {
        val results = FloatArray(1)
        android.location.Location.distanceBetween(
            start.latitude, start.longitude,
            end.latitude, end.longitude,
            results
        )
        return results[0].toDouble() // Retourne la distance en m√®tres
    }

    fun fusedLocationClient(location: android.location.Location?, context: Context): GeoPoint {
        return if (location != null) {
            // Sauvegarde la localisation obtenue
            MapsUtils.saveUserLocation(context, GeoPoint(location.latitude, location.longitude))
            GeoPoint(location.latitude, location.longitude)
        } else {
            // üîÑ R√©cup√®re la derni√®re position sauvegard√©e ou utilise une valeur par d√©faut
            val savedLocation = MapsUtils.loadUserLocation(context)
            if (savedLocation.latitude != 0.0 || savedLocation.longitude != 0.0) {
                savedLocation
            } else {
                // Valeur par d√©faut (ex : Universit√© de Lom√©)
                GeoPoint(6.1707, 1.2310)
            }
        }
    }

    /**
     * Sauvegarde la position de l‚Äôutilisateur dans les pr√©f√©rences partag√©es.
     *
     * @param context Contexte de l‚Äôapplication.
     * @param location Localisation √† sauvegarder.
     */
    fun saveUserLocation(context: Context, location: GeoPoint) {
        val sharedPreferences =
            context.getSharedPreferences("UserLocationPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        val gson = Gson()
        val json = gson.toJson(location)
        editor.putString("userLocation", json)
        editor.apply()
    }

    /**
     * Charge la position de l‚Äôutilisateur depuis les pr√©f√©rences partag√©es.
     *
     * @param context Contexte de l‚Äôapplication.
     * @return La position sauvegard√©e, ou (0.0, 0.0) par d√©faut.
     */
    fun loadUserLocation(context: Context): GeoPoint {
        val sharedPreferences =
            context.getSharedPreferences("UserLocationPrefs", Context.MODE_PRIVATE)
        val gson = Gson()
        val json = sharedPreferences.getString("userLocation", null)
        val type = object : TypeToken<GeoPoint>() {}.type
        return gson.fromJson(json, type) ?: GeoPoint(0.0, 0.0)
    }

    /**
     * Sauvegarde une nouvelle destination dans les pr√©f√©rences.
     *
     * @param context Contexte de l‚Äôapplication.
     * @param destination Destination √† sauvegarder.
     */
    fun saveDestination(context: Context, destination: GeoPoint) {
        val sharedPreferences =
            context.getSharedPreferences("DestinationPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        val gson = Gson()
        val json = gson.toJson(destination)
        editor.putString("destination", json)
        editor.apply()
    }


    /**
     * R√©cup√®re la derni√®re destination sauvegard√©e depuis les pr√©f√©rences.
     *
     * @param context Contexte de l‚Äôapplication.
     * @return Destination sauvegard√©e ou (0.0, 0.0) si aucune.
     */
    fun loadDestination(context: Context): GeoPoint {
        val sharedPreferences =
            context.getSharedPreferences("DestinationPrefs", Context.MODE_PRIVATE)
        val gson = Gson()
        val json = sharedPreferences.getString("destination", null)
        val type = object : TypeToken<GeoPoint>() {}.type
        return gson.fromJson(json, type) ?: GeoPoint(0.0, 0.0)
    }

    /**
     * Supprime la destination sauvegard√©e.
     *
     * @param context Contexte de l‚Äôapplication.
     */
    fun clearDestination(context: Context) {
        val sharedPreferences =
            context.getSharedPreferences("DestinationPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        editor.remove("destination")
        editor.apply()
    }

    /**
     * Sauvegarde la liste des marqueurs r√©cup√©r√©s depuis la map dans les pr√©f√©rences.
     *
     * @param context Contexte de l‚Äôapplication.
     * @param markerList Liste des marqueurs √† sauvegarder.
     */
    fun saveMarkerList(context: Context, markerList: MutableList<Marker>) {
        val sharedPreferences =
            context.getSharedPreferences("MarkerListPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        val gson = Gson()
        val json = gson.toJson(markerList)
        editor.putString("markerList", json)
        editor.apply()
    }

    /**
     * R√©cup√®re la liste des marqueurs depuis les pr√©f√©rences.
     *
     * @param context Contexte de l‚Äôapplication.
     * @return Liste de marqueurs sauvegard√©s ou une liste vide.
     */
    fun loadMarkerList(context: Context): MutableList<Marker> {
        val sharedPreferences =
            context.getSharedPreferences("MarkerListPrefs", Context.MODE_PRIVATE)
        val gson = Gson()
        val json = sharedPreferences.getString("markerList", null)
        val type = object : TypeToken<MutableList<Marker>>() {}.type
        return gson.fromJson(json, type) ?: mutableListOf()
    }

    /**
     * Supprime la liste des marqueurs sauvegard√©s.
     *
     * @param context Contexte de l‚Äôapplication.
     */
    fun clearMarkerList(context: Context) {
        val sharedPreferences =
            context.getSharedPreferences("MarkerListPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        editor.remove("markerList")
        editor.apply()
    }

    /**
     * Redimensionne une ic√¥ne pour l'affichage sur la carte et la met en cache pour les chargements
     * ult√©rieurs.
     *
     * @param icon ID de la ressource drawable.
     * @param resources Acc√®s aux ressources.
     * @return Drawable redimensionn√© ou `null` si non disponible.
     */
    fun resizeIcon(icon: Int = R.drawable.default_marker, resources: Resources): BitmapDrawable? {
        return iconCache[icon] ?: run {
            val drawable = ResourcesCompat.getDrawable(resources, icon, null) ?: return null
            val bitmap = Bitmap.createBitmap(
                drawable.intrinsicWidth,
                drawable.intrinsicHeight,
                Bitmap.Config.ARGB_8888
            )
            val canvas = Canvas(bitmap)
            drawable.setBounds(0, 0, canvas.width, canvas.height)
            drawable.draw(canvas)

            val scaledBitmap = Bitmap.createScaledBitmap(bitmap, 75, 75, false)
            val scaledDrawable = BitmapDrawable(resources, scaledBitmap)
            iconCache[icon] = scaledDrawable
            scaledDrawable
        }
    }

    /**
     * Configure une carte miniature statique montrant la position de l'utilisateur et sa destination.
     * Affiche les marqueurs de d√©part et d‚Äôarriv√©e ainsi que l‚Äôitin√©raire calcul√©.
     *
     * @param miniMap Vue MapView √† configurer.
     * @param userLocation Position de l'utilisateur (par d√©faut (0,0)).
     * @param destination Position de destination (par d√©faut (0,0)).
     * @param context Contexte de l‚Äôapplication.
     * @param activity Activit√© appelante.
     * @param resources Acc√®s aux ressources.
     *
     * @permission ACCESS_FINE_LOCATION
     * @permission ACCESS_COARSE_LOCATION
     */
    @RequiresPermission(allOf = [Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION])
    fun setMiniMap(
        miniMap: MapView,
        userLocation: GeoPoint = GeoPoint(0, 0),
        destination: GeoPoint = GeoPoint(0, 0),
        context: Context,
        activity: Activity,
        resources: Resources
    ) {
        var start = userLocation
        var end = destination
        // Si la localisation utilisateur n'est pas valide, utiliser la destination comme point de d√©part
        if (start.latitude == 0.0 && start.longitude == 0.0) {
            start = end
        }
        miniMap.setTileSource(TileSourceFactory.MAPNIK)
        miniMap.setMultiTouchControls(false)
        // Rendre la carte totalement statique
        miniMap.setBuiltInZoomControls(false) // d√©sactiver les boutons zoom
        miniMap.isTilesScaledToDpi = false

        val latPadding = 0.001
        val lonPadding = 0.001
        val boundingBox = BoundingBox(
            maxOf(start.latitude, end.latitude) + latPadding,
            maxOf(start.longitude, end.longitude) + lonPadding,
            minOf(start.latitude, end.latitude) - latPadding,
            minOf(start.longitude, end.longitude) - lonPadding
        )

        // Ajuster la vue pour montrer les deux points
        miniMap.post {
            miniMap.zoomToBoundingBox(boundingBox, false, 50, 14.0, 14.0.toLong())


            // Marqueur de d√©part
            val startMarker = Marker(miniMap).apply {
                position = start
                setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)
                icon = resizeIcon(R.drawable.maps_and_flags, resources)
            }

            // Marqueur de destination
            val endMarker = Marker(miniMap).apply {
                position = end
                setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)
                icon = resizeIcon(R.drawable.destination, resources)
            }

            miniMap.overlays.clear()
            miniMap.overlays.add(startMarker)
            miniMap.overlays.add(endMarker)

            // D√©sactiver le toucher utilisateur
            miniMap.isFocusable = false
            miniMap.isEnabled = false

            // Bloquer tous les gestes de l'utilisateur
            val touchInterceptor = object : Overlay() {
                override fun onTouchEvent(event: MotionEvent?, mapView: MapView?): Boolean {
                    return true // bloque tous les touch events
                }
            }
            miniMap.overlays.add(touchInterceptor)

            // Obtenir l'itin√©raire
            getRoute(start, end, activity, miniMap)

            miniMap.invalidate()
        }
    }

    /**
     * R√©cup√®re et trace l‚Äôitin√©raire entre deux points en utilisant l‚ÄôAPI OpenRouteService.
     *
     * @param start Point de d√©part.
     * @param end Point d‚Äôarriv√©e.
     * @param activity Activit√© pour l‚Äôex√©cution sur le thread principal.
     * @param mapView Carte √† mettre √† jour.
     */
    private fun getRoute(start: GeoPoint, end: GeoPoint, activity: Activity, mapView: MapView) {
        val apiKey = "5b3ce3597851110001cf62480894b05967b24b268cf8fa5b6a5166f7"
        val url =
            "https://api.openrouteservice.org/v2/directions/driving-car?api_key=$apiKey&start=${start.longitude},${start.latitude}&end=${end.longitude},${end.latitude}"

        val request = Request.Builder().url(url).build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e(
                    "MapsActivity",
                    "Erreur lors de la r√©cup√©ration de l'itin√©raire : ${e.message}"
                )
                activity.runOnUiThread {
                    Toast.makeText(
                        activity,
                        "Impossible de r√©cup√©rer l'itin√©raire",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }

            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    response.body?.string()?.let { jsonString ->
                        try {
                            val jsonObject = JSONObject(jsonString)
                            val features = jsonObject.getJSONArray("features")
                            if (features.length() > 0) {
                                val geometry = features.getJSONObject(0).getJSONObject("geometry")
                                val coordinates = geometry.getJSONArray("coordinates")

                                val geoPoints = mutableListOf<GeoPoint>()
                                for (i in 0 until coordinates.length()) {
                                    val coord = coordinates.getJSONArray(i)
                                    val lon = coord.getDouble(0)
                                    val lat = coord.getDouble(1)
                                    geoPoints.add(GeoPoint(lat, lon))
                                }

                                activity.runOnUiThread {
                                    var currentPolyline = Polyline()
                                    currentPolyline!!.setPoints(geoPoints)
                                    currentPolyline!!.outlinePaint.color =
                                        ContextCompat.getColor(activity, R.color.mainColor)
                                    currentPolyline!!.outlinePaint.strokeWidth = 5f

                                    mapView.overlays.add(currentPolyline)
                                    mapView.invalidate()
                                }
                            }
                        } catch (e: JSONException) {
                            Log.e("MapsUtils", "Erreur JSON: ${e.message}")
                        }
                    }
                } else {
                    Log.e("MapsUtils", "Erreur dans la r√©ponse de l'API de routage")
                }
            }
        })
    }
}